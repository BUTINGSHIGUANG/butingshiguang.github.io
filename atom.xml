<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TeslaChan&#39;s Blog</title>
  
  <subtitle>buting</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://butingshiguang.github.io/"/>
  <updated>2017-10-27T13:12:58.798Z</updated>
  <id>https://butingshiguang.github.io/</id>
  
  <author>
    <name>buting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20171026面试小结</title>
    <link href="https://butingshiguang.github.io/2017/10/27/20171026/"/>
    <id>https://butingshiguang.github.io/2017/10/27/20171026/</id>
    <published>2017-10-27T12:47:10.000Z</published>
    <updated>2017-10-27T13:12:58.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20171026面试问题"><a href="#20171026面试问题" class="headerlink" title=" 20171026面试问题 "></a><center> 20171026面试问题 </center></h1><ul><li>java sleep()为什么要捕获异常</li><li>Java位图</li><li>JavaEE中会用到的设计模式</li><li>Java读取一个mp3文件时可以采用哪种流？字符流，字节流，数据流</li><li>Java虚拟机如何加载一个Java类<a id="more"></a><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li><li>认准一个方向</li><li>把该方向的主流技术栈学会，会用但不求十分精深</li><li>Spring+Strus+Hibernate</li><li>做JavaEE​要会前端CSS-HTML-JAVASCRIPT</li><li>在必要时候能够顶替前端人员进行开发</li><li>熟练应用设计模式</li><li>多刷题，应对技术面试～</li></ul><h1 id="前景了解"><a href="#前景了解" class="headerlink" title="前景了解"></a>前景了解</h1><ul><li>Android Application方向趋于饱和，找工作不易</li><li>嵌入式方向，c++,c,vb,Qt,树莓派，Arduino</li><li>C++找人少，C++对程序员要求高，难度大易出bug</li><li>Java</li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>由 Thread 提供并受 Thread.sleep() 和 Object.wait() 支持的中断机制就是一种取消机制；它允许一个线程请求另一个线程停止它正在做的事情。当一个方法抛出 InterruptedException 时，它是在告诉您，如果执行该方法的线程被中断，它将尝试停止它正在做的事情而提前返回，并通过抛出 InterruptedException 表明它提前返回。 行为良好的阻塞库方法应该能对中断作出响应并抛出 InterruptedException，以便能够用于可取消活动中，而不至于影响响应。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>只有不断加强自己某一方面的技术才能得到用人单位的认可</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;20171026面试问题&quot;&gt;&lt;a href=&quot;#20171026面试问题&quot; class=&quot;headerlink&quot; title=&quot; 20171026面试问题 &quot;&gt;&lt;/a&gt;&lt;center&gt; 20171026面试问题 &lt;/center&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;java sleep()为什么要捕获异常&lt;/li&gt;
&lt;li&gt;Java位图&lt;/li&gt;
&lt;li&gt;JavaEE中会用到的设计模式&lt;/li&gt;
&lt;li&gt;Java读取一个mp3文件时可以采用哪种流？字符流，字节流，数据流&lt;/li&gt;
&lt;li&gt;Java虚拟机如何加载一个Java类&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://butingshiguang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://butingshiguang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>1024程序员节快乐!!!</title>
    <link href="https://butingshiguang.github.io/2017/10/24/20171024/"/>
    <id>https://butingshiguang.github.io/2017/10/24/20171024/</id>
    <published>2017-10-24T04:10:19.000Z</published>
    <updated>2017-10-24T04:20:52.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="祝地球上的程序员们节日愉快，代码无bug！"><a href="#祝地球上的程序员们节日愉快，代码无bug！" class="headerlink" title="祝地球上的程序员们节日愉快，代码无bug！"></a><center>祝地球上的程序员们节日愉快，代码无bug！</center></h1><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=461107563&auto=1&height=66"><br></iframe><br><strong>有人问一个程序员借1000块钱，程序员说借你1024块凑个整吧~那人一脸懵逼</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;祝地球上的程序员们节日愉快，代码无bug！&quot;&gt;&lt;a href=&quot;#祝地球上的程序员们节日愉快，代码无bug！&quot; class=&quot;headerlink&quot; title=&quot;祝地球上的程序员们节日愉快，代码无bug！&quot;&gt;&lt;/a&gt;&lt;center&gt;祝地球上的程序员们节日愉快，代码无bug！&lt;/center&gt;&lt;/h1&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://butingshiguang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://butingshiguang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>java8学习笔记</title>
    <link href="https://butingshiguang.github.io/2017/10/19/20171019/"/>
    <id>https://butingshiguang.github.io/2017/10/19/20171019/</id>
    <published>2017-10-19T06:15:21.000Z</published>
    <updated>2017-10-24T04:35:37.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java8"><a href="#java8" class="headerlink" title="java8"></a><strong>java8</strong></h1><h1 id="java-annotation-注解"><a href="#java-annotation-注解" class="headerlink" title="java annotation (注解)"></a>java annotation (注解)</h1><ul><li>@Override 覆写</li><li>@Deprecated 过期</li><li>@SuppressWarnings({ “rawtypes”, “unchecked” }) 压制警告<a id="more"></a></li></ul><h1 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul><li>Message&lt;?&gt;: 泛型类型通配</li><li>Message&lt;? extends 类&gt;: 设置泛型上限，子类</li><li>Message&lt;? super 类&gt;: 设置泛型下限，父类</li></ul><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt; </span>&#123;     <span class="comment">//设置泛型接口</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        System.out.println(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        IMessage&lt;String&gt; msg = <span class="keyword">new</span> MessageImpl&lt;String&gt;();</div><div class="line">        msg.print(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">fun</span><span class="params">(T t)</span> </span>&#123;   <span class="comment">//T的类型由传入类型决定</span></div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Color &#123;            <span class="comment">//相当于一个类继承了Enum类(抽象类)而已</span></div><div class="line">    RED,GREEN,BLUE;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Color red = Color.RED;</div><div class="line">        System.out.println(red);</div><div class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;   <span class="comment">//values()</span></div><div class="line">            System.out.println(c.ordinal() + <span class="string">" - "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//扩充枚举功能</span></div><div class="line"><span class="keyword">enum</span> Color &#123;            <span class="comment">//相当于一个类继承了Enum类(抽象类)而已</span></div><div class="line">    RED(<span class="string">"红色"</span>),GREEN(<span class="string">"绿色"</span>),BLUE(<span class="string">"蓝色"</span>);</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Color red = Color.RED;</div><div class="line">        System.out.println(red);</div><div class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;   <span class="comment">//values()</span></div><div class="line">            System.out.println(c);  <span class="comment">//调用toString()</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//枚举实现接口</span></div><div class="line"><span class="keyword">enum</span> Color implements Message &#123;</div><div class="line">    RED(<span class="string">"红色"</span>),GREEN(<span class="string">"绿色"</span>),BLUE(<span class="string">"蓝色"</span>);</div><div class="line">        <span class="keyword">private</span> String title;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.title = title;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> title;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Message msg = Color.RED;</div><div class="line">        System.out.println(msg.getTitle());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//枚举最变态的做法</span></div><div class="line"><span class="keyword">enum</span> Color implements Message &#123;</div><div class="line">    RED(<span class="string">"红色"</span>)&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"自己的"</span> + <span class="keyword">this</span>.title;</div><div class="line">        &#125;</div><div class="line">    &#125;,GREEN(<span class="string">"绿色"</span>),BLUE(<span class="string">"蓝色"</span>);</div><div class="line">        <span class="keyword">private</span> String title;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.title = title;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> title;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="泛型中定义普通方法"><a href="#泛型中定义普通方法" class="headerlink" title="泛型中定义普通方法"></a>泛型中定义普通方法</h2><h3 id="使用default在接口中定义普通方法-使用static在接口中定义普通方法"><a href="#使用default在接口中定义普通方法-使用static在接口中定义普通方法" class="headerlink" title="使用default在接口中定义普通方法 使用static在接口中定义普通方法"></a>使用default在接口中定义普通方法 使用static在接口中定义普通方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;  <span class="comment">//此处定义了一个普通方法</span></div><div class="line">        System.out.println(<span class="string">"毁三观的方法"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"直接由接口调用!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">      IMessage msg = <span class="keyword">new</span> MessageImpl();</div><div class="line">      msg.fun(); <span class="comment">//接口中直接定义的</span></div><div class="line">    &#125;</div><div class="line">    IMessage.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">      fun(<span class="keyword">new</span> IMessage() &#123;</div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">              System.out.println(<span class="string">"Hello World!!!"</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// lambda</span></div><div class="line">fun( () -&gt; System.out.println(<span class="string">"Hello World!!!"</span>) );</div></pre></td></tr></table></figure><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><ul><li>(参数表)-&gt; 单行语句;</li><li>(参数表)-&gt; {单行语句};</li><li>(参数表)-&gt; 表达式;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">      fun((s) -&gt; System.out.println(s));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(IMessage msg)</span> </span>&#123;</div><div class="line">        msg.print(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4种方法引用"><a href="#4种方法引用" class="headerlink" title="4种方法引用"></a>4种方法引用</h1><ul><li>引用静态方法: 类名称::static 方法名称;</li><li>引用某个对象的方法: 实例化对象::普通方法;</li><li>引用特定类型的方法: 特定类::普通方法;</li><li>引用构造方法: 类名称::new;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span>   <span class="comment">//此注解指定该接口内部只存在一个方法,即函数式接口(可以引用函数)</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span>&lt;<span class="title">P</span>,<span class="title">R</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">zhuanhuan</span><span class="params">(P p)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">      <span class="comment">//引用类的普通方法</span></div><div class="line">      IMessage&lt;Integer,String&gt; msg = String::valueOf;</div><div class="line">      String str = msg.zhuanhuan(<span class="number">1000</span>);</div><div class="line">      System.out.println(str.replaceAll(<span class="string">"0"</span>, <span class="string">"9"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java8&quot;&gt;&lt;a href=&quot;#java8&quot; class=&quot;headerlink&quot; title=&quot;java8&quot;&gt;&lt;/a&gt;&lt;strong&gt;java8&lt;/strong&gt;&lt;/h1&gt;&lt;h1 id=&quot;java-annotation-注解&quot;&gt;&lt;a href=&quot;#java-annotation-注解&quot; class=&quot;headerlink&quot; title=&quot;java annotation (注解)&quot;&gt;&lt;/a&gt;java annotation (注解)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;@Override 覆写&lt;/li&gt;
&lt;li&gt;@Deprecated 过期&lt;/li&gt;
&lt;li&gt;@SuppressWarnings({ “rawtypes”, “unchecked” }) 压制警告&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="https://butingshiguang.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="https://butingshiguang.github.io/categories/%E7%BC%96%E7%A8%8B/java/"/>
    
    
      <category term="编程" scheme="https://butingshiguang.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="https://butingshiguang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我对“墙”的看法</title>
    <link href="https://butingshiguang.github.io/2017/10/13/20171013/"/>
    <id>https://butingshiguang.github.io/2017/10/13/20171013/</id>
    <published>2017-10-13T07:03:48.000Z</published>
    <updated>2017-10-19T08:32:25.457Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1507889844349&di=ffa8435b81ec67e60b35569c8e920bee&imgtype=0&src=http%3A%2F%2Fwww.gamemei.com%2Fbackground%2Fuploads%2Fallimg%2F20161125%2F1480042915299447.jpg" width="70%" height="50%"></p><p>首先，这里的<strong>墙</strong>指的是中国的防火长城<strong>GFW</strong>，有很多被屏蔽的国外网站如<a href="https://www.google.com/ncr" target="_blank" rel="external">Google</a>,<a href="https://www.youtube.com" target="_blank" rel="external">Youtube</a>,etc.很多人对墙的看法不一，大多数都持有批评的态度。</p><a id="more"></a><p>对于普通用户来说：我认为墙的存在是有好处的，这个社会有太多对中国(包括政府)的批评和抹黑，特别是在国外，Youtube上面骂中国的一大堆。如果完全开发对国外网站的访问，势必存在一些没有自己独立思考的人会跟风起哄，而且国外对中国公民散布谣言，乱我军心也是必然存在的。</p><p>对于IT/计算机等从业者或某些爱好者来说，访问<a href="https://www.google.com/ncr" title="Google" target="_blank" rel="external">Google</a>等网站是必须的，所以有时候难免会<strong>翻墙</strong>，GFW造成了很大的不便。</p><p>总的说来，GFW的存在有着一定的必要性，利大于弊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1507889844349&amp;di=ffa8435b81ec67e60b35569c8e920bee&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.gamemei.com%2Fbackground%2Fuploads%2Fallimg%2F20161125%2F1480042915299447.jpg&quot; width=&quot;70%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，这里的&lt;strong&gt;墙&lt;/strong&gt;指的是中国的防火长城&lt;strong&gt;GFW&lt;/strong&gt;，有很多被屏蔽的国外网站如&lt;a href=&quot;https://www.google.com/ncr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google&lt;/a&gt;,&lt;a href=&quot;https://www.youtube.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Youtube&lt;/a&gt;,etc.很多人对墙的看法不一，大多数都持有批评的态度。&lt;/p&gt;
    
    </summary>
    
      <category term="科技" scheme="https://butingshiguang.github.io/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="科技" scheme="https://butingshiguang.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>今天星期四，稍微弄了一下</title>
    <link href="https://butingshiguang.github.io/2017/10/12/20171012/"/>
    <id>https://butingshiguang.github.io/2017/10/12/20171012/</id>
    <published>2017-10-12T00:40:01.000Z</published>
    <updated>2017-10-19T08:32:25.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试测试"><a href="#测试测试" class="headerlink" title="测试测试"></a>测试测试</h1><h2 id="时光不停"><a href="#时光不停" class="headerlink" title="时光不停"></a>时光不停</h2><h3 id="时光不停-1"><a href="#时光不停-1" class="headerlink" title="时光不停"></a>时光不停</h3><blockquote><p>不停</p></blockquote><p><a href="https://weibo.com/p/1005055918998349/home" target="_blank" rel="external">新浪微博</a></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1507782690489&amp;di=c9464115f6db2f61c0b8d9bb532edf4b&amp;imgtype=0&amp;src=http%3A%2F%2Fe.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2F622762d0f703918f5cb03abf513d269759eec466.jpg" alt="pic0"></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=509902724&auto=1&height=66"><br></iframe><embed height="500" width="700" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=14909587&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"><br>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试测试&quot;&gt;&lt;a href=&quot;#测试测试&quot; class=&quot;headerlink&quot; title=&quot;测试测试&quot;&gt;&lt;/a&gt;测试测试&lt;/h1&gt;&lt;h2 id=&quot;时光不停&quot;&gt;&lt;a href=&quot;#时光不停&quot; class=&quot;headerlink&quot; title=&quot;时光不停&quot;&gt;&lt;/a&gt;时光不停&lt;/h2&gt;&lt;h3 id=&quot;时光不停-1&quot;&gt;&lt;a href=&quot;#时光不停-1&quot; class=&quot;headerlink&quot; title=&quot;时光不停&quot;&gt;&lt;/a&gt;时光不停&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;不停&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://weibo.com/p/1005055918998349/home&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新浪微博&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1507782690489&amp;amp;di=c9464115f6db2f61c0b8d9bb532edf4b&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fe.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2F622762d0f703918f5cb03abf513d269759eec466.jpg&quot; alt=&quot;pic0&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://butingshiguang.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://butingshiguang.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到不停的博客，我还有一个名字叫Tesla Chan</title>
    <link href="https://butingshiguang.github.io/2017/10/11/hello-world/"/>
    <id>https://butingshiguang.github.io/2017/10/11/hello-world/</id>
    <published>2017-10-11T04:17:27.000Z</published>
    <updated>2017-10-21T16:10:31.515Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://butingshiguang.github.io/">KM</a>!<br>这是我的第二个博客，使用GithubPages搭建，我是 TeslaChan @buting，一个热爱技术，爱好科学的骚年~~~</p><h2 id="以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视-gt-lt"><a href="#以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视-gt-lt" class="headerlink" title="以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视&gt;_&lt;"></a>以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视&gt;_&lt;</h2><h3 id="我的新浪微博-曦未晞-，欢迎关注-，这才是重点"><a href="#我的新浪微博-曦未晞-，欢迎关注-，这才是重点" class="headerlink" title="我的新浪微博 @曦未晞 ，欢迎关注~，这才是重点"></a>我的新浪微博 @曦未晞 ，欢迎关注~，这才是重点</h3><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://butingshiguang.github.io/&quot;&gt;KM&lt;/a&gt;!&lt;br&gt;这是我的第二个博客，使用GithubPages搭建，我是 TeslaChan @buting，一个热爱技术，爱好科学的骚年~~~&lt;/p&gt;
&lt;h2 id=&quot;以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视-gt-lt&quot;&gt;&lt;a href=&quot;#以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视-gt-lt&quot; class=&quot;headerlink&quot; title=&quot;以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视&amp;gt;_&amp;lt;&quot;&gt;&lt;/a&gt;以下都是扯淡！！！博客先搭起来再说，以后再慢慢美化整理，乱七八糟的东西请无视&amp;gt;_&amp;lt;&lt;/h2&gt;&lt;h3 id=&quot;我的新浪微博-曦未晞-，欢迎关注-，这才是重点&quot;&gt;&lt;a href=&quot;#我的新浪微博-曦未晞-，欢迎关注-，这才是重点&quot; class=&quot;headerlink&quot; title=&quot;我的新浪微博 @曦未晞 ，欢迎关注~，这才是重点&quot;&gt;&lt;/a&gt;我的新浪微博 @曦未晞 ，欢迎关注~，这才是重点&lt;/h3&gt;
    
    </summary>
    
      <category term="欢迎" scheme="https://butingshiguang.github.io/categories/%E6%AC%A2%E8%BF%8E/"/>
    
    
      <category term="欢迎" scheme="https://butingshiguang.github.io/tags/%E6%AC%A2%E8%BF%8E/"/>
    
  </entry>
  
</feed>
